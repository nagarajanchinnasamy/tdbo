[comment {-*- tcl -*-}]
[manpage_begin tdbo n 0.1.4]
[copyright {2013, Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>}]
[moddesc   {Tcl DataBase Objects}]
[titledesc {Framework that provides Object Oriented Access to a Data Store}]
[category  {Database}]
[require tdbo]
[description]

[para]
The [cmd tdbo] package provides an object oriented mechanism to access
data in data stores. A tdbo object instance provides [cmd add],
[cmd get], [cmd save] and [cmd delete] methods to manipulate data in
the data store. In addition, they provide [cmd configure] and [cmd cget]
methods to access data members of an instance in a standard tcl-ish
style.

[para]
tdbo objects can be defined in various ways based on the OO-system that
is used by the application. For e.g., a tdbo object can be defined in
Itcl by inheriting [class tdbo::Itcl::DBObject] class. Similarly ....

[para]
A data-store-driver is the one that implements necessary connectivity
mechanism and procedures to access the data store. [cmd tdbo::load]
method is used to load a specific data-store-driver instance. Using
[cmd open] method of a data-store-driver instance, an application
obtains one or many connection handles to the data store. During the
instantiation of a tdbo object, a connection handle is passed on to it
to make use of the connection handle to perform [cmd add], [cmd get],
[cmd save] and [cmd delete] methods on the data store.

[para]
Using the connection handle, an application can also invoke 1)
[cmd mget] 2) [cmd begin], [cmd commit] and [cmd rollback] and 3)
[cmd close] methods to 1) retrieve multiple data records based on
filtering, sorting and grouping criteria 2) perform atomic and
concurrent transactions and 3) close the connection respectively.

[para]
Currently, tdbo supports [const sqlite3], [const mysqltcl],
[const Pgtcl], [const tdbc::sqlite3], [const tdbc::mysql] and
[const tdbc::postgres] drivers. Note that sqlite3, mysqltcl and
Pgtcl drivers are functional in Tcl 8.5 and above environments while
tdbc::<driver>s are available only on Tcl 8.6 and above.

[para]
[section {Commands}]
[subsection {TDBO Commands}]

[list_begin definitions]

[call [cmd {tdbo load}] [arg driver]]

Loads a data-store-driver and returns a handle to the driver instance.
[arg driver] can be one of [const sqlite3], [const mysqltcl],
[const Pgtcl], [const tdbc::sqlite3], [const tdbc::mysql] and
[const tdbc::postgres]

[list_end]

[para]
[subsection {TDBO Driver Commands}]
[list_begin definitions]

[call [arg db] [cmd open] [arg args]]

Where [arg db] is the data-store-driver instance handle returned by
[cmd {tdbo load}] command. This command establishes a new connection to
the database and returns the connection handle. Arguments are driver
dependent. Please refer to the documentation of respective driver.

[list_end]
[para]
[subsection {TDBO Connection Commands}]
[para]

[list_begin definitions]

[call [arg conn] [cmd begin] [arg args]]

Begins a database transaction. Arguments are driver dependent. Please
refer to the documentation of respective driver.

[call [arg conn] [cmd close]]

Closes the connection with database.

[call [arg conn] [cmd commit]]

Commits the currently active database transaction.

[call [arg conn] [cmd conn]]

Definition...

[call [arg conn] [cmd rollback]]

Rolls back the currently active database transaction.

[list_end]

[para]
[subsection {TDBO Object Commands}]
[para]
A tdbo object can be defined using various ways based on the OO system
the application written in. Please refer to the corresponding section
on how to define and use tdbo objects using the respective OO system.

[list_begin definitions]

[call [arg obj] [cmd {add}] [arg args]]

Insert the object as a new record into database. In preparing the record to insert, this method prepares a list of name-value pairs, by default, from all public member variables of the object. However, if the argument args is passed, it uses only those field names in the args-list in preparing the name-value pairs. While preparing the name-value pairs, it includes only those member variables that are initialized with a value other than "<undefined>". In Itcl, Member variables that are uninitialized or unset are internally identified with the value "<undefined>". We make use of this state of a member variable to omit a field in the insert operation. To set a particular field's value to NULL, you need to set the value of the corresponding public member variable to "<null>". Upon successful completion of add operation, the new values of sequence / auto-incremented fields are populated back into the object.

[call [arg obj] [cmd {delete}]]

delete the record represented by the object from database and reset the object values. The record to be deleted from the database is identified based on the description provided in Object To Database Record Mapping.

[call [arg obj] [cmd {get}] [arg args]]

Retrieve a record from the database and populate object's member variables with values retrieved. The record to be retrieved from the database is identified based on the description provided in Object To Database Record Mapping. By default, this method uses all public member variable names as the fields of the record to be retrieved from the database. However, if the argument args is passed with a list of field names (corresponding to its public member variables), then only those fields are retrieved and populated into the object.

[call [arg obj] [cmd {save}] [arg args]]

Save the object by updating the corresponding record in the database. The record to be updated in the database is identified based on the description provided in Object To Database Record Mapping. In preparing the record to save, this method prepares a list of name-value pairs, by default, from all public member variables of the object. However, if the argument args is passed, it uses only those field names in the args-list in preparing the name-value pairs. While preparing the name-value pairs, it includes only those member variables that are initialized with a value other than <undefined>. In Itcl, member variables that are not initialized or unset are internally identified with the value <undefined>. We make use of this state of a member variable to omit a field in the update operation. To set a particular field's value to NULL, you need to set the value of the corresponding public member variable to "<null>".

[list_end]

[para]
[section {tdbo::Itcl::DBObject Class}]
[para]
A base class to be inherited by Itcl based tdbo object definitions.

[subsection {Constructor & Destructor}]
[list_begin definitions]

[call [cmd {tdbo::Itcl::DBObject::constructor}] [arg conn]]

Stores the definition of primary keys, unique fields and sequence /
auto-increment fields by invoking following protected methods:
[method _define_primarykey], [method _define_unique] and
[method _define_autoincrement]. Also prepares list of field names for
later usage by [method add] and [method save] methods. [arg conn] is
the connection handle obtained through [arg db] [cmd open] command.

[call [cmd {tdbo::Itcl::DBObject::destructor}]]

Nothing special done here.

[list_end]

[subsection {Proc / Methods}]
[list_begin definitions]

[call [arg {public proc}] [cmd {tdbo::Itcl::DBObject::schema_name}]]

This is an abstract static proc to be implemented by the derived class
to return the name of the table / view that the derived class
represents.

[call [arg {protected method}] [cmd {tdbo::Itcl::DBObject::_define_primarykey}]]

Provides a default implementation by invoking [method define_primarykey]
with an empty list. Override this method to invoke
[cmd define_primarykey] with your own list of names of the public
variables that constitute the primary key of the table that the class
represents.

[call [arg {protected method}] [cmd {tdbo::Itcl::DBObject::_define_unique}]]

Provides a default implementation by invoking [method define_unique]
with an empty list. Override this method to invoke
[cmd define_unique] with your own list of list-of-names of the public
variables that constitute the unique fields of the table or view that
the class represents.

[call [arg {protected method}] [cmd {tdbo::Itcl::DBObject::_define_autoincrement}]]

Provides a default implementation by invoking
[method define_autoincrement] with an empty list. Override this method
to invoke [cmd define_autoincrement] with your own list of names of the
public variables that are autoincrement or sequence fields in the table
that the class represents.

[call [arg {protected method}] [cmd {tdbo::Itcl::DBObject::define_primarykey}] [arg args]]

Defines a list of public variable names that map to the primary key
fields of the associated table / view in the database. This method is
meant to be invoked by derived classes from within
[method _define_primarykey] method. [arg args] is a list of field names
that constitute the primary key.

[call [arg {protected method}] [cmd {tdbo::Itcl::DBObject::define_unique}] [arg args]]

Defines a list of list of public variable names that map to the list of
combination of unique fields of the associated table / view in the
database. This method is meant to be invoked by derived classes
from within [method _define_unique] method. [arg args] is a list of
list-of-field-names that constitute list of combination of unique
fields.

[call [arg {protected method}] [cmd {tdbo::Itcl::DBObject::define_autoincrement}] [arg args]]

Defines a list of public variable names that map to the auto-increment / 
sequence fields of the associated table / view in the database. This
method is meant to be invoked by derived classes from within
[method _define_autoincrement] method. [arg args] is a list of field
names that are auto-increment / sequence fields.

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::configure}] [arg {{option ""}}] [arg args]]

This method has following usages:

[list_begin definitions]

[call [arg obj] [cmd configure] [opt [arg {-opt1 val}]] [opt [arg {-opt2 val}]] [opt [arg ...]]]
To set values of public member variables. [arg opt] is the name of a public member variable.

[call [arg obj] [cmd configure] [arg from_obj]]
Object to object copy. To copy the values of all public member variables of [arg from_obj] into the corresponding public member variables of [arg obj].

[call [arg obj] [cmd configure]]
To retrieve initial and current values of all public member variables. Returns a dictionary in the format: -opt {-ival val -cval val} -opt {-ival val -cval val} ...

[call [cmd class] [arg obj] [arg {-opt1 val}] [opt [arg {-opt2 val}]] [opt [arg ...]]]
Though this is not a direct usage of this method, when [arg obj] is being constructed, Itcl's object construction mechanism invokes the 1st usage of the [method configure] method on [arg obj] passing [arg {-opt1 val}] [opt [arg {-opt2 val}]] [opt [arg ...]] as its arguments to set the values of the public member variables.

[call [cmd class] [arg obj] [arg from_obj]]
Though this is not a direct usage of this method, when [arg obj] is being constructed, ITcl's object construction mechanism invokes the 2nd usage of the [method configure] method on [arg obj] passing [arg from_obj] as its parameter. Hence, it results into object-to-object copy of public member variables.
[list_end]

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::cget}] [arg {{option ""}}] [arg args]]

This method has following usages:

[list_begin definitions]

[call [arg obj] [cmd cget] [arg -opt]]
Returns current value of the public member variable specified by [arg opt].

[call [arg obj] [cmd cget] [arg {-opt1 vName1}] [opt [arg {-opt2 vName2}]] [opt [arg ...]]]
To get the value of public member variables into the respective variable names specified. [arg opt] is the name of a public member variable. [arg vName] is the name of a variable into which the value of the [arg opt] is to be stored.

[call [arg obj] [cmd cget]]
To get current values of all public member variables as a dictionary. Returns the dictionary in the format: -opt1 val1 -opt2 val2 ...

[list_end]

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::clear}]]

Resets all public member variables with the initialization value given in the class definition.

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::add}] [arg args]]

Insert the object as a new record into database. In preparing the record to insert, this method prepares a list of name-value pairs, by default, from all public member variables of the object. However, if the argument args is passed, it uses only those field names in the args-list in preparing the name-value pairs. While preparing the name-value pairs, it includes only those member variables that are initialized with a value other than "<undefined>". In Itcl, Member variables that are uninitialized or unset are internally identified with the value "<undefined>". We make use of this state of a member variable to omit a field in the insert operation. To set a particular field's value to NULL, you need to set the value of the corresponding public member variable to "<null>". Upon successful completion of add operation, the new values of sequence / auto-incremented fields are populated back into the object.

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::delete}]]

Delete the record represented by the object from database and reset the object values. The record to be deleted from the database is identified based on the description provided in Object To Database Record Mapping.

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::get}] [arg args]]

Retrieve a record from the database and populate object's member variables with values retrieved. The record to be retrieved from the database is identified based on the description provided in Object To Database Record Mapping. By default, this method uses all public member variable names as the fields of the record to be retrieved from the database. However, if the argument args is passed with a list of field names (corresponding to its public member variables), then only those fields are retrieved and populated into the object.

[call [arg {public method}] [cmd {tdbo::Itcl::DBObject::save}] [arg args]]

Save the object by updating the corresponding record in the database. The record to be updated in the database is identified based on the description provided in Object To Database Record Mapping. In preparing the record to save, this method prepares a list of name-value pairs, by default, from all public member variables of the object. However, if the argument args is passed, it uses only those field names in the args-list in preparing the name-value pairs. While preparing the name-value pairs, it includes only those member variables that are initialized with a value other than <undefined>. In Itcl, member variables that are not initialized or unset are internally identified with the value <undefined>. We make use of this state of a member variable to omit a field in the update operation. To set a particular field's value to NULL, you need to set the value of the corresponding public member variable to "<null>". 

[list_end]

[subsection {Common / Variables}]
[list_begin definitions]

[call [arg {protected variable}] [cmd {tdbo::Itcl::DBObject::clsName}]]

Name of the derived class as returned by [lb]$this info class[rb]

[call [arg {protected variable}] [cmd {tdbo::Itcl::DBObject::log}]]

Tcllib's logger object command to invoke logging commands such as ${log}::info "message"

[list_end]
[para]
[section EXAMPLES]
 
Following example gives a step-by-step illustration on how to use
this package.

[para]
[example_begin]
#
# Example goes here
#
[example_end]

[para]
[section {See Also}]
[cmd struct::record], [cmd tdao::dbc] and [cmd tdao::dao]
[para]
[keywords DAO {Data Access Objects} {Database Connectivity}]
[para]
[section {AUTHOR}]

Nagarajan Chinnasamy <nagarajanchinnasamy@gmail.com>

[section {BUGS, IDEAS, FEEDBACK}]

This document, and the package it describes, will undoubtedly contain
bugs and other problems.

Please report such in the category [emph {tdao}] of the
[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].

Please also report any ideas for enhancements you may have for either
package and/or documentation.

[manpage_end]
